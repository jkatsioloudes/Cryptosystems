Results for different Ping Combinations:

B.C = Before Certificates 
A.C = After Certificates (when IPSEC is established)

FROM		TO				SUCCESS B.C?	SUCCESS A.C?
mobile-user-0	internal-host (192.168.65.2)	N		Y (changed)
mobile-user-0	router (192.168.65.1)		N		Y (changed)	
mobile-user-0	router (213.1.133.2)		Y		Y
mobile-user-0	internet (213.1.133.1)		Y		Y
mobile-user-0	internet (32.0.0.1)		Y		Y
mobile-user-0	apache (213.1.133.3)		N		N

router 		internal-host (192.168.65.2)	Y		Y	
router 		internet (213.1.133.1)		Y		Y
router 		internet (32.0.0.1)		Y		Y
router 		apache (213.1.133.3)		Y		Y
router 		mobile-user-0 (32.0.0.2)	Y		Y

internet 	internal-host (192.168.65.2)	Net unreach	Net unreach
internet 	router (192.168.65.1)		Net unreach	Net unreach
internet 	router (213.1.133.2)		Y		Y	
internet 	apache (213.1.133.3)		Y		Y
internet 	mobile-user-0 (32.0.0.2)	Y		Y

internal-host 	router (192.168.65.1)		Y		Y
internal-host 	router (213.1.133.2)		Y		Y
internal-host 	internet (213.1.133.1)		N		N
internal-host 	internet (32.0.0.1)		N		N
internal-host 	apache (213.1.133.3)		N		N
internal-host 	mobile-user-0 (32.0.0.2)	N		Y (changed)


ESP notes

ipsec
Firstly, a test on what is encrypted and what is not in the 'ipsec' lab provided to us.
Based on my findings, this wholly depends on the tunelled addresses, meaning if those
are the internal correspondings of rA and rB, otherwise if it is the public then we have
plain text, in detail:

Topology:

a (private 172.22.22.42)  

rA (private 172.22.22.41  public 192.0.2.2)	

Internet (public 192.0.2.1  public 198.51.100.1)

rB (private 10.0.0.1  public 198.51.100.2)

b (private 10.0.0.2)


Investigation of what is encrypted using both ping and netcat.

Assumption:

Sniffing traffic from the hostile using: tcpdump -v -s0 -i any -w /hostlab/name.pcap

Example:

from 'rB'	execute in 'rB': nc 198.51.100.1 8888
to 'a'		execute in 'a': nc -l -p 8888

However in the following example we can choose from which address we are connecting
in case the server has both private and public:

from 'a'	execute in 'a': nc 198.51.100.2 8888 	(this is rB's public)
from 'a'	execute in 'a': nc 10.0.0.1 8888	(this is rB's private)
to 'rB'		execute in 'rB': nc -l -p 8888


FROM (nc ip port)	TO (nc -l -p port)		PLAIN TEXT SENT				RESULT?

[1.pcap]
Internet 		a (reverse it, from a to Int)	"hello from Internet to a"
rB 			a				"hello from rB to a"			encr
b 			a				"hello from b to a"			encr

[2.pcap] 
Internet		rA (private 172.22.22.41)	"hello from Internet to rA private"
rB			rA (private 172.22.22.41)	"hello from rB to rA private"		encr
b			rA (private 172.22.22.41)	"hello from b to rA private"		encr

[3.pcap]
Internet		rA (public 192.0.2.2)		"hello from Internet to rA public"
rB			rA (public 192.0.2.2)		"hello from rB to rA public"		not encr
b			rA (public 192.0.2.2)		"hello from b to rA public"		not encr

[4.pcap]
Internet		b				"hello from Internet to b"
rA			b				"hello from rA to b"			encr
a			b				"hello from a to b"			encr

[5.pcap]
Internet		rB (private 10.0.0.1)		"hello from Internet to rB private"
rA			rB (private 10.0.0.1)		"hello from rA to rB private"		encr
a			rB (private 10.0.0.1)		"hello from a to rB private"		encr

[6.pcap]
Internet		rB (public 198.51.100.2)	"hello from Internet to rb public"
rA			rB (public 198.51.100.2)	"hello from rA to rB public"		not encr
a			rB (public 198.51.100.2)	"hello from a to rB public"		not encr


*Conclusions:

1. When the messages are encrypted then you can see source and destination being rA's and rB's corresponding public address HOWEVER since the tunnel exists between rA's private and rB's private by using their public address as proxies
then sending messages or use the public address directly then there is no encryption.

2. My understanding from the ipsec.conf file is that the left and right addresses are the public meaning that the ones
that are proxying their internal(private) addresses which are named as leftsubnet and rightsubnet.

3. Encryption breaks whenever we ping/netcat with the public address of the router and not the internal one, despite
that the public one is the one being written in the left and right in ipsec.conf.


PMA

Assumption:

Sniffing traffic from the hostile using: tcpdump -v -s0 -i any -w /hostlab/name.pcap

Example:

from 'mobile-user-0'	execute in 'mobile-user-0': nc -l -p 8888
to 'internal-host'	execute in 'internal-host': nc 32.0.0.2 8888

However in the following example we can choose from which address we are connecting
in case the server has both private and public:

from 'mobile-user-0'	execute in 'mobile-user-0': nc 198.51.100.2 8888  (this is router's public)
from 'mobile-user-0'	execute in 'mobile-user-0': nc 10.0.0.1 8888  (this is router's private)
to 'router'		execute in 'router': nc -l -p 8888


FROM (nc ip port)	TO (nc -l -p port)		PLAIN TEXT SENT					RESULT?

[1.pcap]
mobile-user-0		internal-host			"hello from mobile-user-0 to internal-host"	encr	

[2.pcap]
mobile-user-0 		router (private 192.168.65.1)	"hello from mobile-user-0 to router private"	encr

[3.pcap]
mobile-user-0		router (public 213.1.133.2)	"hello from mobile-user-0 to router public"	not encr

[4.pcap]
internal-host		mobile-user-0			"hello from internal-host to mobile-user-0"	encr

[5.pcap]
router 			mobile-user-0			"hello from router to mobile-user-0"		encr


Testing the same with the second mobile user called mobile-user-1.

FROM (nc ip port)	TO (nc -l -p port)		PLAIN TEXT SENT					RESULT?

[6.pcap]
mobile-user-1		internal-host			"hello from mobile-user-1 to internal-host"	encr	

[7.pcap]
mobile-user-1 		router (private 192.168.65.1)	"hello from mobile-user-1 to router private"	encr

[8.pcap]
mobile-user-1		router (public 213.1.133.2)	"hello from mobile-user-1 to router public"	not encr

[9.pcap]
internal-host		mobile-user-1			"hello from internal-host to mobile-user-1"	encr

[10.pcap]
router 			mobile-user-1			"hello from router to mobile-user-1"		encr


Apache Notes

How Does HTTPS Work?

https://www.instantssl.com/ssl-certificate-products/https.html

HTTPS pages typically use one of two secure protocols to encrypt communications - SSL (Secure Sockets Layer) or TLS (Transport Layer Security). Both the TLS and SSL protocols use what is known as an 'asymmetric' Public Key Infrastructure (PKI) system. An asymmetric system uses two 'keys' to encrypt communications, a 'public' key and a 'private' key. Anything encrypted with the public key can only be decrypted by the private key and vice-versa.

As the names suggest, the 'private' key should be kept strictly protected and should only be accessible the owner of the private key. In the case of a website, the private key remains securely ensconced on the web server. Conversely, the public key is intended to be distributed to anybody and everybody that needs to be able to decrypt information that was encrypted with the private key.

Even if there exists a MiTM that is able to decrypt the content of the server using its public key, they we expect that is not able to alter it and send it forward as it does not have the server's private key.

What is a HTTPS Certificate?

When you request a HTTPS connection to a webpage, the website will initially send its SSL certificate to your browser. This certificate contains the public key needed to begin the secure session. Based on this initial exchange, your browser and the website then initiate the 'SSL handshake'. The SSL handshake involves the generation of shared secrets to establish a uniquely secure connection between yourself and the website.

When a trusted SSL Digital Certificate is used during a HTTPS connection, users will see a padlock icon in the browser address bar. When an Extended Validation Certificate is installed on a web site, the address bar will turn green.


TLS vs SLL and Do We need Different Certificates?

https://www.globalsign.com/en/blog/ssl-vs-tls-difference/

Should You Be Using SSL or TLS?

Both SSL 2.0 and 3.0 have been deprecated by the IETF (in 2011 and 2015, respectively). Over the years vulnerabilities have been and continue to be discovered in the deprecated SSL protocols (e.g. POODLE, DROWN). Most modern browsers will show a degraded user experience (e.g. line through the padlock or https in the URL bar, security warnings) when they encounter a web server using the old protocols. For these reasons, you should disable SSL 2.0 and 3.0 in your server configuration, leaving only TLS protocols enabled.
Certificates are not the same as protocols

Before anyone starts worrying that they need to replace their existing SSL Certificates with TLS Certificates, it’s important to note that certificates are not dependent on protocols. That is, you don’t need to use a TLS Certificate vs. an SSL Certificate. While many vendors tend to use the phrase “SSL/TLS Certificate”, it may be more accurate to call them “Certificates for use with SSL and TLS", since the protocols are determined by your server configuration, not the certificates themselves.

It’s likely you will continue to see certificates referred to as SSL Certificates because at this point that’s the term more people are familiar with, but we’re beginning to see increased usage of the term TLS across the industry. SSL/TLS is a common compromise until more people become familiar with TLS.

Are SSL and TLS Any Different Cryptographically?

In truth, the answer to this question is yes, but you can say the same about the historic versions of SSL 2 and 3 or the TLS versions 1 with 1.1, 1.2 or 1.3. SSL and TLS are both about the same protocol but because of the version differences, SSL 2 was not interoperable with version 3, and SSL version 3 not with TLS version 1. You could argue that Transport Layer Security (TLS) was just a new name for SSL v4 - essentially, we are talking about the same protocol.

Each newly released version of the protocol came and will come with its own improvements and/or new/deprecated features. SSL version one was never released, version two did but had some major flaws, SSL version 3 was a rewrite of version two (to fix these flaws) and TLS version 1 an improvement of SSL version 3. Since the release of TLS 1.0 the changes have been less significant, but never less important.

It’s worth noting here that SSL and TLS simply refer to the handshake that takes place between a client and a server. The handshake doesn’t actually do any encryption itself, it just agrees on a shared secret and type of encryption that is going to be used.


TLS-only from strongswan
https://www.strongswan.org/testing/testresults/ikev2/rw-eap-tls-only/index.html

ACTION												EXPECTED	ACTUAL
Step 1 is to view a .pcap file without TLS with traffic stemming from router and internet.	plaintext
Step 2 towards apache TLS is to make it accessible to both internal-host and mobile-users.	plaintext
Step 3 is to create TLS and do step 1 and step 2 following step rules again.			ENCR

