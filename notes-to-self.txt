ipsec.conf DOCUMENTATION:
https://wiki.strongswan.org/projects/strongswan/wiki/ConnSection

Results for different Ping Combinations:

B.C = Before Certificates 
A.C = After Certificates (when IPSEC is established)

FROM		TO				SUCCESS B.C?	SUCCESS A.C?
mobile-user-0	internal-host (192.168.65.2)	N		Y (changed)
mobile-user-0	router (192.168.65.1)		N		Y (changed)	
mobile-user-0	router (213.1.133.2)		Y		Y
mobile-user-0	internet (213.1.133.1)		Y		Y
mobile-user-0	internet (32.0.0.1)		Y		Y
mobile-user-0	apache (213.1.133.3)		N		N

router 		internal-host (192.168.65.2)	Y		Y	
router 		internet (213.1.133.1)		Y		Y
router 		internet (32.0.0.1)		Y		Y
router 		apache (213.1.133.3)		Y		Y
router 		mobile-user-0 (32.0.0.2)	Y		Y

internet 	internal-host (192.168.65.2)	Net unreach	Net unreach
internet 	router (192.168.65.1)		Net unreach	Net unreach
internet 	router (213.1.133.2)		Y		Y	
internet 	apache (213.1.133.3)		Y		Y
internet 	mobile-user-0 (32.0.0.2)	Y		Y

internal-host 	router (192.168.65.1)		Y		Y
internal-host 	router (213.1.133.2)		Y		Y
internal-host 	internet (213.1.133.1)		N		N
internal-host 	internet (32.0.0.1)		N		N
internal-host 	apache (213.1.133.3)		N		N
internal-host 	mobile-user-0 (32.0.0.2)	N		Y (changed)


ESP notes

ipsec
Firstly, a test on what is encrypted and what is not in the 'ipsec' lab provided to us.
Based on my findings, this wholly depends on the tunelled addresses, meaning if those
are the internal correspondings of rA and rB, otherwise if it is the public then we have
plain text, in detail:

Topology:

a (private 172.22.22.42)  

rA (private 172.22.22.41  public 192.0.2.2)	

Internet (public 192.0.2.1  public 198.51.100.1)

rB (private 10.0.0.1  public 198.51.100.2)

b (private 10.0.0.2)


Investigation of what is encrypted using both ping and netcat.

Assumption:

Sniffing traffic from the hostile using: tcpdump -v -s0 -i any -w /hostlab/name.pcap

Example:

from 'rB'	execute in 'rB': nc 198.51.100.1 8888
to 'a'		execute in 'a': nc -l -p 8888

However in the following example we can choose from which address we are connecting
in case the server has both private and public:

from 'a'	execute in 'a': nc 198.51.100.2 8888 	(this is rB's public)
from 'a'	execute in 'a': nc 10.0.0.1 8888	(this is rB's private)
to 'rB'		execute in 'rB': nc -l -p 8888


FROM (nc ip port)	TO (nc -l -p port)		PLAIN TEXT SENT				RESULT?

[1.pcap]
Internet 		a (reverse it, from a to Int)	"hello from Internet to a"
rB 			a				"hello from rB to a"			encr
b 			a				"hello from b to a"			encr

[2.pcap] 
Internet		rA (private 172.22.22.41)	"hello from Internet to rA private"
rB			rA (private 172.22.22.41)	"hello from rB to rA private"		encr
b			rA (private 172.22.22.41)	"hello from b to rA private"		encr

[3.pcap]
Internet		rA (public 192.0.2.2)		"hello from Internet to rA public"
rB			rA (public 192.0.2.2)		"hello from rB to rA public"		not encr
b			rA (public 192.0.2.2)		"hello from b to rA public"		not encr

[4.pcap]
Internet		b				"hello from Internet to b"
rA			b				"hello from rA to b"			encr
a			b				"hello from a to b"			encr

[5.pcap]
Internet		rB (private 10.0.0.1)		"hello from Internet to rB private"
rA			rB (private 10.0.0.1)		"hello from rA to rB private"		encr
a			rB (private 10.0.0.1)		"hello from a to rB private"		encr

[6.pcap]
Internet		rB (public 198.51.100.2)	"hello from Internet to rb public"
rA			rB (public 198.51.100.2)	"hello from rA to rB public"		not encr
a			rB (public 198.51.100.2)	"hello from a to rB public"		not encr


*Conclusions:

1. When the messages are encrypted then you can see source and destination being rA's and rB's corresponding public address HOWEVER since the tunnel exists between rA's private and rB's private by using their public address as proxies
then sending messages or use the public address directly then there is no encryption.

2. My understanding from the ipsec.conf file is that the left and right addresses are the public meaning that the ones
that are proxying their internal(private) addresses which are named as leftsubnet and rightsubnet.

3. Encryption breaks whenever we ping/netcat with the public address of the router and not the internal one, despite
that the public one is the one being written in the left and right in ipsec.conf.


PMA

Assumption:

Sniffing traffic from the hostile using: tcpdump -v -s0 -i any -w /hostlab/name.pcap

Example:

from 'mobile-user-0'	execute in 'mobile-user-0': nc -l -p 8888
to 'internal-host'	execute in 'internal-host': nc 32.0.0.2 8888

However in the following example we can choose from which address we are connecting
in case the server has both private and public:

from 'mobile-user-0'	execute in 'mobile-user-0': nc 198.51.100.2 8888  (this is router's public)
from 'mobile-user-0'	execute in 'mobile-user-0': nc 10.0.0.1 8888  (this is router's private)
to 'router'		execute in 'router': nc -l -p 8888


FROM (nc ip port)	TO (nc -l -p port)		PLAIN TEXT SENT					RESULT?

[1.pcap]
mobile-user-0		internal-host			"hello from mobile-user-0 to internal-host"	encr	

[2.pcap]
mobile-user-0 		router (private 192.168.65.1)	"hello from mobile-user-0 to router private"	encr

[3.pcap]
mobile-user-0		router (public 213.1.133.2)	"hello from mobile-user-0 to router public"	not encr

[4.pcap]
internal-host		mobile-user-0			"hello from internal-host to mobile-user-0"	encr

[5.pcap]
router 			mobile-user-0			"hello from router to mobile-user-0"		encr


Testing the same with the second mobile user called mobile-user-1.

FROM (nc ip port)	TO (nc -l -p port)		PLAIN TEXT SENT					RESULT?

[6.pcap]
mobile-user-1		internal-host			"hello from mobile-user-1 to internal-host"	encr	

[7.pcap]
mobile-user-1 		router (private 192.168.65.1)	"hello from mobile-user-1 to router private"	encr

[8.pcap]
mobile-user-1		router (public 213.1.133.2)	"hello from mobile-user-1 to router public"	not encr

[9.pcap]
internal-host		mobile-user-1			"hello from internal-host to mobile-user-1"	encr

[10.pcap]
router 			mobile-user-1			"hello from router to mobile-user-1"		encr


SSL Tests

SSL Engine off
wget https:// will not complain because the ssl is off.

FROM			TO		EXPECTED	RES
[11.pcap]
router			apache		not encr	not encr

[12.pcap]
internet		apache		not encr	not encr

SSL Engine on
both wget and curl here will complain so we can make use of curl using the -k or --insecure flag
to avoid ssl complains.
curl -k https://

FROM			TO		EXPECTED	RES
[13.pcap]
router			apache		encr		encr

[14.pcap]
internet		apache		encr		encr

